# Build + publish a single self-contained Windows single-file executable.
# This workflow automatically finds a .sln or .csproj in the repo and publishes it.
name: Build and publish .NET Desktop (self-contained single-file)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Release]
        runtime: [win-x64]

    env:
      CONFIGURATION: ${{ matrix.configuration }}
      RUNTIME: ${{ matrix.runtime }}
      PUBLISH_DIR: ${{ github.workspace }}/artifacts/${{ matrix.runtime }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Optional debug: list top-level files (useful to verify where your .sln/.csproj is)
    - name: Debug: list repository files (top 3 levels)
      shell: pwsh
      run: |
        Write-Host "Workspace: $env:GITHUB_WORKSPACE"
        Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Depth 3 | Select-Object -First 200

    # Find a .sln or .csproj file and export its full path as step output 'project'
    - name: Find solution or project file
      id: find
      shell: pwsh
      run: |
        $workspace = $env:GITHUB_WORKSPACE
        $sln = Get-ChildItem -Path $workspace -Recurse -Filter *.sln -File -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($sln) {
          Write-Host "Found solution: $($sln.FullName)"
          echo "project=$($sln.FullName)" >> $env:GITHUB_OUTPUT
          exit 0
        }
        $csproj = Get-ChildItem -Path $workspace -Recurse -Filter *.csproj -File | Select-Object -First 1
        if ($csproj) {
          Write-Host "Found csproj: $($csproj.FullName)"
          echo "project=$($csproj.FullName)" >> $env:GITHUB_OUTPUT
          exit 0
        }
        Write-Error "No .sln or .csproj found in repository. Make sure a solution or project file is committed."

    - name: Restore (uses discovered project)
      shell: pwsh
      env:
        PROJECT_PATH: ${{ steps.find.outputs.project }}
      run: |
        Write-Host "Running dotnet restore for $Env:PROJECT_PATH"
        dotnet restore "$Env:PROJECT_PATH"

    - name: Publish single-file self-contained executable
      shell: pwsh
      env:
        PROJECT_PATH: ${{ steps.find.outputs.project }}
        PUBLISH_DIR: ${{ env.PUBLISH_DIR }}
      run: |
        if (-not (Test-Path -Path $Env:PUBLISH_DIR)) {
          New-Item -ItemType Directory -Path $Env:PUBLISH_DIR | Out-Null
        }

        dotnet publish "$Env:PROJECT_PATH" `
          -c $Env:CONFIGURATION `
          -r $Env:RUNTIME `
          --self-contained true `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=true `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -o $Env:PUBLISH_DIR

    - name: Upload publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: published-${{ matrix.runtime }}
        path: ${{ env.PUBLISH_DIR }}
